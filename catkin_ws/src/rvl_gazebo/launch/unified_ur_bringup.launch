<?xml version="1.0"?>
<launch>

    <!-- specify which robot to spawn into Gazebo -->
    <arg name="ur_variant" default="ur5e" />

    <!-- robot_state_publisher configuration -->
    <arg name="tf_prefix" default="" doc="tf_prefix used for the robot." />
    <arg name="tf_pub_rate" default="500" doc="Rate at which robot_state_publisher should publish transforms." />

    <!-- Load controller settings -->
    <arg name="controller_config_file" default="$(eval find('rvl_gazebo') + '/config/universal_robots/' + ur_variant + '_controllers.yaml')" doc="Config file used for defining the ROS-Control controllers." />
    <arg name="controllers" default="joint_state_controller arm_controller" doc="Controllers that are activated by default." />

    <!-- Load specified controllers -->
    <rosparam file="$(arg controller_config_file)" command="load" />

    <!-- using rqt_joint_trajectory_controller -->
    <!-- <arg name="using_rqt_trajectory_controller" default="false"/> -->

    <!-- robot description with Gazebo xacro instead of default robot xacro -->
    <arg name="joint_limit_params" default="$(eval find('rvl_robot_description') + '/config/universal_robots/' + ur_variant + '/joint_limits.yaml')" />
    <arg name="kinematics_params" default="$(eval find('rvl_robot_description') + '/config/universal_robots/' + ur_variant + '/default_kinematics.yaml')" />
    <arg name="physical_params" default="$(eval find('rvl_robot_description') + '/config/universal_robots/' + ur_variant + '/physical_parameters.yaml')" />
    <arg name="visual_params" default="$(eval find('rvl_robot_description') + '/config/universal_robots/' + ur_variant + '/visual_parameters.yaml')" />
    <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
    <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller" />
    <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
    <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find rvl_gazebo)/xacro/ur.xacro'
        joint_limit_params:=$(arg joint_limit_params)
        kinematics_params:=$(arg kinematics_params)
        physical_params:=$(arg physical_params)
        visual_params:=$(arg visual_params)
        transmission_hw_interface:=$(arg transmission_hw_interface)
        safety_limits:=$(arg safety_limits)
        safety_pos_margin:=$(arg safety_pos_margin)
        safety_k_position:=$(arg safety_k_position)" />

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
        <param name="tf_prefix" value="$(arg tf_prefix)" />
    </node>

    <!-- spawn GUI controller when requested -->
    <!-- <node pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" name="rqt_gui_controller" if="$(eval arg('using_rqt_trajectory_controller') == True)"/> -->

    <!-- Spawn the model loaded earlier in the simulation just started -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="
        -urdf
        -param robot_description
        -model universal_robot_$(arg ur_variant)
        -z 0.5" output="screen" respawn="false" />

    <!-- Load and start the controllers listed in the 'controllers' arg. -->
    <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg controllers)" output="screen" respawn="false" />
</launch>