# using stock Ubuntu 20.04
FROM ubuntu:20.04

# no prompts from apt-get
ARG DEBIAN_FRONTEND=noninteractive

# use bash as primary shell for RUN commands
SHELL [ "/bin/bash", "-c" ]

# for slow installations
RUN apt-get update && apt-get -y --no-install-recommends install python3 python3-pip && \
    python3 -m pip install --upgrade pip setuptools wheel testresources && \
    python3 -m pip install apt-mirror-updater && \
    apt-mirror-updater -a

# installing initial setup packages
RUN apt-get update && apt-get -y --no-install-recommends install \
    git \
    curl \
    wget \
    apt-utils \
    software-properties-common \
    build-essential \
    cmake \
    lsb-release \
    python3-pip \
    python3-dev \
    gpg-agent \
    libxext6 \
    libx11-6 \
    libglvnd0 \
    libgl1 \
    libglx0 \
    libegl1 \
    freeglut3-dev \
    net-tools \
    && apt-get -y autoremove \
    && apt-get clean

# installing ROS Noetic and build tools
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
    apt-get update && apt-get -y --no-install-recommends install \
    ros-noetic-desktop-full \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    python3-catkin-tools \
    && apt-get -y autoremove \
    && apt-get clean

# get latest gazebo (one-liner)
# RUN curl -sSL http://get.gazebosim.org | sh

# get selected gazebo (Gazebo 11)
RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/gazebo-stable.list' && \
    wget https://packages.osrfoundation.org/gazebo.key -O - | apt-key add - && \
    apt-get update && apt-get -y --no-install-recommends install gazebo11 \
    && apt-get -y autoremove \
    && apt-get clean

# installing ROS Packages
RUN apt-get update && apt-get -y --no-install-recommends install \
    ros-noetic-ros-control \
    ros-noetic-ros-controllers \
    ros-noetic-gazebo-ros-pkgs \
    ros-noetic-gazebo-ros-control \
    ros-noetic-moveit

# define catkin workspace
ENV HOME /root
ENV CATKIN_WS /root/catkin_ws
ENV CATKIN_SRC /root/catkin_ws/src

# setup catkin workspace
RUN rosdep init && \
    rosdep update && \
    source /opt/ros/noetic/setup.bash && \
    mkdir -p ${CATKIN_SRC} && \
    cd ${CATKIN_WS} && \
    catkin init && \
    rosdep install --from-paths ./src --ignore-packages-from-source -y && \
    catkin build --cmake-args -DCMAKE_BUILD_TYPE=Release

# final setups i.e. added convenient aliases + ROS setups + pretty terminal
RUN echo "source ${CATKIN_WS}/devel/setup.bash" >> ${HOME}/.bashrc && \
    echo "cd ${CATKIN_WS}" >> ${HOME}/.bashrc && \
    echo "clear" >> ${HOME}/.bashrc
    
RUN echo "alias src_ros='source ${CATKIN_WS}/devel/setup.bash'" >> ${HOME}/.bashrc && \
    echo "alias run_rosdep='cd ${CATKIN_WS} && rosdep update && rosdep install --from-paths src --ignore-src -r -y'" >> ${HOME}/.bashrc && \
    echo "alias run_catkin='catkin clean -y && catkin build -DCMAKE_BUILD_TYPE=Debug'" >> ${HOME}/.bashrc

# nice, shorter prompt
RUN echo "PS1='\n\[\e[0;38;5;122m\]\u \[\e[0;38;5;147m\]\w\n\[\e[0m\]> \[\e[0m\]'" >> ${HOME}/.bashrc

# nvidia-container-runtime for nvidia-docker hosts
# ENV NVIDIA_VISIBLE_DEVICES \
#     ${NVIDIA_VISIBLE_DEVICES:-all}
# ENV NVIDIA_DRIVER_CAPABILITIES \
#     ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics
# ENV QT_X11_NO_MITSHM 1
ENV TERM xterm-256color